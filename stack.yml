services:
  order-service:
    build:
      context: ./orderservice  # Context of build where Dockerfile is located
      dockerfile: Dockerfile    # Dockerfile used for building the image

    # This is not necessary since we include this image in the Dockerfile
    # image: node:alpine 
    image: oscargomezgonzalezz/order-service:mongo
    container_name: order-service-container
    
    ports:
      - 3333:3333 

    depends_on:
      - mysql-service  # Ensuring mysql-service starts before order-service
    deploy:
      replicas: 2  #Stack is an improvement of compose, since we can replicate services being able to manage more requests
  confirmation-grpc-service:
    build:
      context: ./confirmation-service
      dockerfile: Dockerfile
    ports:
      - "3335:3335"
    environment:
      NODE_ENV: production
    container_name: confirmation-grpc-service-container
    image: oscargomezgonzalezz/confirmation-grpc-service:mongo
    deploy:
      replicas: 2

  mongodb-service:
    image: mongo:6.0
    restart: always
    container_name: mongodb-service-container
    ports:
      - 27017:27017  # Expose MongoDB's default port
    environment:
      MONGO_INITDB_ROOT_USERNAME: node
      MONGO_INITDB_ROOT_PASSWORD: password1234
      MONGO_INITDB_DATABASE: database1  # Default database
    volumes:
      - ./init-mongo.js:/docker-entrypoint-initdb.d/init-mongo.js  # Initialization script
    deploy:
      replicas: 1


#volumes:
  #app-volume: {}  # Defining named volume for MySQL data
  #app-volume-config: {}  # Defining named volume for MySQL config
